shiny::runApp('C:/Users/Lidia/Dropbox/MagicHaskeller/MagicWrangler/Pruebas/R')
runApp('C:/Users/Lidia/Dropbox/MagicHaskeller/MagicWrangler/Pruebas/R')
runApp('C:/Users/Lidia/Dropbox/MagicHaskeller/MagicWrangler/Pruebas/R')
runApp('C:/Users/Lidia/Dropbox/MagicHaskeller/MagicWrangler/Pruebas/R')
runApp('C:/Users/Lidia/Dropbox/MagicHaskeller/MagicWrangler/Pruebas/R')
runApp('C:/Users/Lidia/Dropbox/MagicHaskeller/MagicWrangler/Pruebas/R')
runApp('C:/Users/Lidia/Dropbox/MagicHaskeller/MagicWrangler/Pruebas/R')
runApp('C:/Users/Lidia/Dropbox/MagicHaskeller/MagicWrangler/Pruebas/R/MagicWrangler-ShinyResults')
runApp('C:/Users/Lidia/Dropbox/MagicHaskeller/MagicWrangler/Pruebas/R')
runApp('C:/Users/Lidia/Dropbox/MagicHaskeller/MagicWrangler/Pruebas/R/MagicWrangler-ShinyResults')
setwd("/home/liconoc/Dropbox/MagicHaskeller/MagicWrangler/Pruebas/R/datos/primitives")
primitives <- list.files(pattern="*.txt")
setwd("/home/liconoc/Dropbox/MagicHaskeller/MagicWrangler/Pruebas/R/datos/csv")
files <- list.files(pattern="*.csv")
help(system)
setwd("C:/Users/Lidia/OneDrive - UPV/DSIC/FPU/MagicWrangler_2017-2018/DeteccionDominio")
ds_original<-read.csv("dataset_dominios.csv")
summary(ds_original)
###Fechas
ds_dates<-read.csv("datasetsBalanceados/dataset_dates.csv")
head(ds_dates)
###Emails
ds_emails<-read.csv("datasetsBalanceados/dataset_emails.csv")
head(ds_emails)
###Nombres
ds_names<-read.csv("datasetsBalanceados/dataset_names.csv")
head(ds_names)
###Strings
ds_words<-read.csv("datasetsBalanceados/dataset_words.csv")
head(ds_words)
###Horas
ds_hours<-read.csv("datasetsBalanceados/dataset_hours.csv")
head(ds_hours)
###TelÃ©fonos
ds_phones<-read.csv("datasetsBalanceados/dataset_phones.csv")
head(ds_phones)
ds<-rbind(ds_dates, ds_emails, ds_hours, ds_names, ds_phones, ds_words)
summary(ds)
ds[,1]<-as.character(ds[,1])
ds[,2]<-as.character(ds[,2])
ds[,3]<-as.character(ds[,3])
ds$input1[is.na(ds$input1)] <- "NO-INPUT"
ds$input2[is.na(ds$input2)] <- "NO-INPUT"
ds$output[is.na(ds$output)] <- "NO-INPUT"
ds[which(ds$input1==""),"input1"] <- "EMPTY"
ds[which(ds$input2==""),"input2"] <- "EMPTY"
ds[which(ds$output==""),"output"] <- "EMPTY"
library("caret")
train_control<- trainControl(method="cv", number=10, savePredictions = TRUE)
model_cv_tree<- train(domain~., data=ds, trControl=train_control, method="C5.0Tree")
postResample(pred=model_cv_tree$pred$pred, obs = model_cv_tree$pred$obs)
confusionMatrix(data = model_cv_tree$pred$pred, reference = model_cv_tree$pred$obs)
model_cv_nnet<- train(domain~., data=ds, trControl=train_control, method="nnet")
postResample(pred=model_cv_nnet$pred$pred, obs = model_cv_nnet$pred$obs)
confusionMatrix(data = model_cv_nnet$pred$pred, reference = model_cv_nnet$pred$obs)
model_cv_nb<- train(domain~., data=ds, trControl=train_control, method="naive_bayes")
postResample(pred=model_cv_nb$pred$pred, obs = model_cv_nb$pred$obs)
confusionMatrix(data = model_cv_nb$pred$pred, reference = model_cv_nb$pred$obs)
model_cv_rf<- train(domain~., data=ds, trControl=train_control, method="rf")
postResample(pred=model_cv_rf$pred$pred, obs = model_cv_rf$pred$obs)
confusionMatrix(data = model_cv_rf$pred$pred, reference = model_cv_rf$pred$obs)
library("caret")
train_control<- trainControl(method="cv", number=10, savePredictions = TRUE)
model_cv_tree<- train(domain~., data=ds, trControl=train_control, method="C5.0Tree")
postResample(pred=model_cv_tree$pred$pred, obs = model_cv_tree$pred$obs)
model_cv_nnet<- train(domain~., data=ds, trControl=train_control, method="nnet")
postResample(pred=model_cv_nnet$pred$pred, obs = model_cv_nnet$pred$obs)
postResample(pred=model_cv_nnet$pred$pred, obs = model_cv_nnet$pred$obs)
postResample(pred=model_cv_rf$pred$pred, obs = model_cv_rf$pred$obs)
has_X <- function(input, X){
return(grepl(X, input))
}
has_X <- function(input, X){
return(grepl(X, input))
}
start_Upper <- function(input){
return(grepl("^[[:upper:]]", input))
}
start_lower <- function(input){
return(grepl("^[[:lower:]]", input))
}
start_digit <- function(input){
return(grepl("^[[:digit:]]", input))
}
has_blanks <- function(input){
return(grepl("[[:blank:]]", input))
}
has_puntuation <- function(input){
return(grepl("[[:punct:]]", input))
}
ejemplo1 = "aidiohmioh@yisush.com"
ejemplo2 = "Dr. Suele Pasar"
ejemplo3 = "6/6/2016"
metaParams <- function(input){
#tiene "@"
#tiene "/"
#tiene "-"
return(c(input, has_X(input,"@"), has_X(input,"/"), has_X(input,"-"),
start_Upper(input),
start_lower(input),
start_digit(input),
has_blanks(input),
has_puntuation(input)))
}
ds <- data.frame()
ds <-rbind(ds, metaParams(ejemplo1))
View(ds)
library(dplyr)
ds <- mutate_all(ds,as.character)
ds <-rbind(ds, metaParams(ejemplo2))
ds <-rbind(ds, metaParams(ejemplo3))
colnames(ds) <- c("example", "hasAt", "hasBar", "hasMinus", "startUpper", "startLower", "startDigit", "hasBlanks","hasPunctuation")
if (!require("dplyr")) {install.packages("dplyr",dependencies=TRUE); library("dplyr")}
if (!require("stringr")) {install.packages("stringr",dependencies=TRUE); library("stringr")}
setwd("C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/detectMetaParams")
## Automatizar... poner en carpetas separadas
## Funciones generales
source("detectMetaParams_general.R")
## Funciones especificas de dominios
source("detectMetaParams_dates.R")
source("detectMetaParams_names.R")
source("detectMetaParams_phones.R")
source("detectMetaParams_emails.R")
source("detectMetaParams_words.R")
source("detectMetaParams_hours.R")
## Lista de las funciones
functions <- lsf.str()
## FunciÃƒÂ³n para detectar las metacaracterÃƒ­sticas (Hay que aÃƒÂ±adirlas todas)
## Mejorar para que se aÃƒÂ±adan las funciones solas?
metaParams <- function(input){
results<-c()
for(f in 1:length(functions)){
#Aplico todas las funciones menos las de base
if(!startsWith(as.character(functions[f]), "base")) {
##print(as.character(functions[f]))
##print(lapply(input,functions[f])[[1]])
results<-c(results,lapply(input,functions[f])[[1]])
}
}
return(results)
}
##Cargar un dataset/ejemplo
#ejemplo1 = "aidiohmioh@yisush.com"
#ejemplo2 = "Dr. Suele Pasar"
#ejemplo3 = "6/6/2016"
#ds<-read.csv("../DatasetsBalanceados/dataset_balanceado.csv")
test<-read.csv("C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/dataset_test.csv")
ds<-test[1,]
View(ds)
ds$primitives<-NULL
View(ds)
## Generar dataset de metacaracteristicas
ds_metaParams <- data.frame()
inputs<-ncol(ds)-2
for(i in 1:nrow(ds)){
data_row<-c(inputs)
for(j in 1:(inputs+1))
{
data_row<-c(data_row, metaParams(as.character(ds[i,j])))
}
data_row<-c(data_row, as.character(ds[i,"domain"]))
if(i==1){
ds_metaParams <-rbind(ds_metaParams, data_row)
ds_metaParams <- mutate_all(ds_metaParams,as.character)
}else{
ds_metaParams <-rbind(ds_metaParams, data_row)
}
}
names<-c()
for(f in 1:length(functions)){
#Aplico todas las funciones menos las de base
if(!startsWith(as.character(functions[f]), "base")) {
names<-c(names, as.character(functions[f]))
}
}
cols<-c("inputs")
for(i in 1:(inputs+1))
{
cols<-c(cols,paste(names,colnames(ds)[i],sep = "_"))
}
cols<-c(cols,"domain")
colnames(ds_metaParams) <- cols
View(ds_metaParams)
write.csv(ds_metaParams, "C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/example_metaParams.csv", row.names = FALSE)
library("caret")
setwd("C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/detectDomain")
ds<-read.csv("../../datasets/dataset_metaparams.csv")
ds_examples<-read.csv("../../datasets/ds_domains_balanced.csv")
ds_all<-cbind(ds_examples, ds)
train_control<- trainControl(method="cv", number=10, savePredictions = TRUE)
models<-c("C5.0Tree","nnet","naive_bayes","rf")
metaparams_models<-matrix(nrow = 4,ncol = 3)
colnames(metaparams_models) = c("Model", "Accuracy", "Kappa")
for(i in 1:length(models)){
model<-train(domain~., data=ds, trControl=train_control, method=models[i])
results<-postResample(pred=model$pred$pred, obs = model$pred$obs)
metaparams_models[i,]<-c(models[i],round(as.numeric(results[1]),3),round(as.numeric(results[2])))
#confusionMatrix(data = model$pred$pred, reference = model$pred$obs)
#g <- ggplot(model$pred, aes(pred,fill=pred))
#g + geom_bar()
}
models<-c("rf")
metaparams_models<-matrix(nrow = 4,ncol = 3)
colnames(metaparams_models) = c("Model", "Accuracy", "Kappa")
for(i in 1:length(models)){
model<-train(domain~., data=ds, trControl=train_control, method=models[i])
results<-postResample(pred=model$pred$pred, obs = model$pred$obs)
metaparams_models[i,]<-c(models[i],round(as.numeric(results[1]),3),round(as.numeric(results[2])))
#confusionMatrix(data = model$pred$pred, reference = model$pred$obs)
#g <- ggplot(model$pred, aes(pred,fill=pred))
#g + geom_bar()
}
### Cross-validation con las metacaracteristicas usando probabilidades
train_control<- trainControl(method="cv", number=10, savePredictions = TRUE, classProbs = TRUE)
model_prob<- train(domain~., data=ds, trControl=train_control, method="rf")
model_prob
save(model_prob, file = "C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/modelo_dominio.rda")
View(ds)
library(mldr)
library(RWeka)
library("caret")
### Sigo el tutorial del paper: Working with multi-lablel datasets in R: The mldr Package
setwd("C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018")
cols<-c()
#ds_functions<-read.csv("ds_functions_final.csv")
ds_functions<-read.csv("code/characterizeMetaparamsFunctions/ds_functions_for_ds_domains_unbalanced.csv")
for(i in 1:dim(ds_functions)[2]){
ds_functions[,i]<-as.logical(ds_functions[,i])
#Se repiten algunas columnasy les aÃ±ade un .1
if(grepl("[.]", colnames(ds_functions)[i])){
cols<-c(cols,i)
}
}
ds_functions<-ds_functions[,-cols]
ds_metaparams<-read.csv("code/characterizeMetaparamsFunctions/ds_metaparams_for_ds_domains_unbalanced.csv")
ds<-cbind(ds_metaparams,ds_functions)
ds_ml <- mldr_from_dataframe(ds, labelIndices = c((dim(ds_metaparams)[2]+1):dim(ds)[2]), name = "ds")
########## 1. Binary Relevance (BR): Transforms the original multilabel dataset into several binary datasets.
## transforma a un problema binario. Ahora se puede usar cualquier clasificador
ds_ml_br<-mldr_transform(ds_ml, type = "BR")
####Caret
train_control<- trainControl(method="cv", number=10, savePredictions = TRUE,  classProbs = TRUE)
ds_probs<-ds_functions
br_caret_rf<-matrix(ncol = 3, nrow = ncol(ds_functions))
colnames(br_caret_rf)<-c("Function","Accuracy","Kappa")
for(i in 1:length(ds_ml_br)){
label<-colnames(ds_ml_br[[i]][dim(ds_ml_br[[1]])[2]])
print(label)
colnames(ds_ml_br[[i]])[ncol(ds_ml_br[[i]])] <- "Class"
if(sum(ds_ml_br[[i]]$Class)>0){
#ds_ml_br[[i]]$Class<-as.factor(ds_ml_br[[i]]$Class)
ds_ml_br[[i]]$Class<-make.names(ds_ml_br[[i]]$Class)
model<-train(Class~., data=ds_ml_br[[i]], trControl=train_control, method="rf")
save(model, file = paste("C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/functions_models/modelo_",label,".rda", sep = ""))
results<-postResample(pred=model$pred$pred, obs = model$pred$obs)
for(j in 1:nrow(ds_probs)){
ds_probs[j,i]<-round(mean(model$pred[which(model$pred$rowIndex==j),"TRUE."]),3)
}
colnames(ds_ml_br[[i]])[ncol(ds_ml_br[[i]])] <- label
br_caret_rf[i,]<-c(label, round(results[1],3), round(results[2],3))
#confusionMatrix(data = model$pred$pred, reference = model$pred$obs)
#g <- ggplot(model$pred, aes(pred,fill=pred))
#g + geom_bar()
}else{
br_caret_rf[i,]<-c(label, NA, NA)
for(j in 1:nrow(ds_probs)){
ds_probs[j,i]<-0
}
colnames(ds_ml_br[[i]])[ncol(ds_ml_br[[i]])] <- label
}
}
View(br_caret_rf)
save(br_caret_rf, "C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/tabla_funciones.RData")
View(br_caret_rf)
save("C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/tabla_funciones.RData", br_caret_rf)
save(br_caret_rf, file="C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/tabla_funciones.RData")
View(model)
View(ds_probs)
round(mean(model$pred[which(model$pred$rowIndex==j),"TRUE."]),3)
model$pred[which(model$pred$rowIndex==j),"TRUE."]
model$pred
if (!require("dplyr")) {install.packages("dplyr",dependencies=TRUE); library("dplyr")}
if (!require("stringr")) {install.packages("stringr",dependencies=TRUE); library("stringr")}
setwd("C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/detectMetaParams")
## Automatizar... poner en carpetas separadas
## Funciones generales
source("detectMetaParams_general.R")
## Funciones especificas de dominios
source("detectMetaParams_dates.R")
source("detectMetaParams_names.R")
source("detectMetaParams_phones.R")
source("detectMetaParams_emails.R")
source("detectMetaParams_words.R")
source("detectMetaParams_hours.R")
## Lista de las funciones
functions <- lsf.str()
## FunciÃƒÂ³n para detectar las metacaracterÃƒ­sticas (Hay que aÃƒÂ±adirlas todas)
## Mejorar para que se aÃƒÂ±adan las funciones solas?
metaParams <- function(input){
results<-c()
for(f in 1:length(functions)){
#Aplico todas las funciones menos las de base
if(!startsWith(as.character(functions[f]), "base")) {
##print(as.character(functions[f]))
##print(lapply(input,functions[f])[[1]])
results<-c(results,lapply(input,functions[f])[[1]])
}
}
return(results)
}
##Cargar un dataset/ejemplo
#ejemplo1 = "aidiohmioh@yisush.com"
#ejemplo2 = "Dr. Suele Pasar"
#ejemplo3 = "6/6/2016"
#ds<-read.csv("../DatasetsBalanceados/dataset_balanceado.csv")
test<-read.csv("C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/dataset_test.csv")
ds<-test[1,]
ds$primitives<-NULL
## Generar dataset de metacaracteristicas
ds_metaParams <- data.frame()
## Automatizar para un dataset/ejemplo, input1/input2/.../inputn/output
inputs<-ncol(ds)-2
for(i in 1:nrow(ds)){
data_row<-c(inputs)
for(j in 1:(inputs+1))
{
data_row<-c(data_row, metaParams(as.character(ds[i,j])))
}
data_row<-c(data_row, as.character(ds[i,"domain"]))
if(i==1){
ds_metaParams <-rbind(ds_metaParams, data_row)
ds_metaParams <- mutate_all(ds_metaParams,as.character)
}else{
ds_metaParams <-rbind(ds_metaParams, data_row)
}
}
## Incluir el dominio real en el dataset
names<-c()
for(f in 1:length(functions)){
#Aplico todas las funciones menos las de base
if(!startsWith(as.character(functions[f]), "base")) {
names<-c(names, as.character(functions[f]))
}
}
cols<-c("inputs")
for(i in 1:(inputs+1))
{
cols<-c(cols,paste(names,colnames(ds)[i],sep = "_"))
}
cols<-c(cols,"domain")
colnames(ds_metaParams) <- cols
write.csv(ds_metaParams, "C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/example_metaParams.csv", row.names = FALSE)
test<-read.csv("C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/dataset_test.csv")
ds<-test[1,]
ds$primitives<-NULL
## Generar dataset de metacaracteristicas
ds_metaParams <- data.frame()
## Automatizar para un dataset/ejemplo, input1/input2/.../inputn/output
inputs<-ncol(ds)-2
for(i in 1:nrow(ds)){
data_row<-c(inputs)
for(j in 1:(inputs+1))
{
data_row<-c(data_row, metaParams(as.character(ds[i,j])))
}
data_row<-c(data_row, as.character(ds[i,"domain"]))
if(i==1){
ds_metaParams <-rbind(ds_metaParams, data_row)
ds_metaParams <- mutate_all(ds_metaParams,as.character)
}else{
ds_metaParams <-rbind(ds_metaParams, data_row)
}
}
## Incluir el dominio real en el dataset
names<-c()
for(f in 1:length(functions)){
#Aplico todas las funciones menos las de base
if(!startsWith(as.character(functions[f]), "base")) {
names<-c(names, as.character(functions[f]))
}
}
cols<-c("inputs")
for(i in 1:(inputs+1))
{
cols<-c(cols,paste(names,colnames(ds)[i],sep = "_"))
}
cols<-c(cols,"domain")
colnames(ds_metaParams) <- cols
write.csv(ds_metaParams, "C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/example_metaParams.csv", row.names = FALSE)
test<-read.csv("C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/dataset_test.csv")
ds<-test[1,]
ds$primitives<-NULL
## Generar dataset de metacaracteristicas
ds_metaParams <- data.frame()
## Automatizar para un dataset/ejemplo, input1/input2/.../inputn/output
inputs<-ncol(ds)-2
for(i in 1:nrow(ds)){
data_row<-c(inputs)
for(j in 1:(inputs+1))
{
data_row<-c(data_row, metaParams(as.character(ds[i,j])))
}
data_row<-c(data_row, as.character(ds[i,"domain"]))
if(i==1){
ds_metaParams <-rbind(ds_metaParams, data_row)
ds_metaParams <- mutate_all(ds_metaParams,as.character)
}else{
ds_metaParams <-rbind(ds_metaParams, data_row)
}
}
## Incluir el dominio real en el dataset
names<-c()
for(f in 1:length(functions)){
#Aplico todas las funciones menos las de base
if(!startsWith(as.character(functions[f]), "base")) {
names<-c(names, as.character(functions[f]))
}
}
cols<-c("inputs")
for(i in 1:(inputs+1))
{
cols<-c(cols,paste(names,colnames(ds)[i],sep = "_"))
}
cols<-c(cols,"domain")
colnames(ds_metaParams) <- cols
write.csv(ds_metaParams, "C:/Users/Lidia/Dropbox/MagicWrangler_2017-2018/IJCAI2018/code/completeExample/example_metaParams.csv", row.names = FALSE)
