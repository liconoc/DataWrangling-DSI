## Lines starting with # will be ignored, so you can exclude individual functions by commenting them out. 
## NÃºmeros
0 0 :: Int
0 1 :: Int
0 2 :: Int
0 3 :: Int
0 4 :: Int
0 5 :: Int
## Constantes
0 dash :: [Char]
0 slash :: [Char]
0 dot :: [Char]
0 comma :: [Char]
0 colon  :: [Char]
0 lBracket  :: [Char]
0 rBracket  :: [Char]
0 and :: [Char]
0 andWithDots :: [Char]
0 at :: [Char]
0 hash :: [Char]
0 lparentheses :: [Char]
0 rparentheses :: [Char]
0 space :: [Char]
## Strings
0 changePunctuationString :: [Char] -> [Char] -> [Char]
0 deletePunctuationString :: [Char] -> [Char]
0 deleteSomePunctuationString :: [Char] -> [Char] -> [Char]
0 splitStringByPunctuation :: [Char] -> [Char] -> [[Char]]
0 swapElementsString :: Int -> Int -> [Char] -> [Char]
0 swapElementsArray :: Int -> Int -> [[Char]] -> [[Char]]
0 appendPositionArray :: [[Char]] -> [Char] -> Int -> [[Char]]
0 appendPositionString :: [Char] -> [Char] -> Int -> [Char]
0 append :: [Char] -> [Char] -> [Char]
0 prepend :: [Char] -> [Char] -> [Char]
0 replacePositionString :: [Char] -> [Char] -> Int -> [Char]	
0 replaceAll :: [Char] -> [Char] -> [Char] -> [Char]
0 toLowString :: [Char] -> [Char]
0 toUpperString :: [Char] -> [Char]
0 reduceWord :: [Char] -> Int -> [Char]
0 takeOneOfArray :: [[Char]] -> Int -> [Char]
0 joinStringsWithPunctuation :: [Char] -> [Char] -> [Char] -> [Char]
0 getOneWordByPosition :: [Char] -> Int -> [Char]
0 getFirstWord :: [Char] -> [Char]
0 getLastWord :: [Char] -> [Char]
0 getOneCharacterByPosition :: [Char] -> Int -> [Char]
0 getFirstCharacter :: [Char] -> [Char]
0 getLastCharacter :: [Char] -> [Char]
0 getStartToFirstSymbolOccurrence :: [Char] -> [Char] -> [Char]
0 getStartToLastSymbolOccurrence :: [Char] -> [Char] -> [Char]
0 getLastSymbolOccurrenceToEnd :: [Char] -> [Char] -> [Char]
0 getFirstSymbolOccurrenceToEnd :: [Char] -> [Char] -> [Char]
0 getCaps :: [Char] -> [Char]
0 reduceSpaces :: [Char] -> [Char]
0 setBrackets :: [Char] -> [Char]
0 completeBrackets :: [Char] -> [Char]
0 completeParentheses :: [Char] -> [Char]
0 getFirstDigitToEnd :: [Char] -> [Char]
0 getStartToFirstDigit :: [Char] -> [Char]
## Original
2 concat :: forall a . (->) ([[a]]) ([a])
2 (++) :: forall a . (->) ([a]) ([a] -> [a])
2 filter :: forall a . (a -> Bool) -> [a] -> [a]
2 foldr
2 drop 1
2 True :: Bool
2 False :: Bool
2 iF :: forall a . (->) Bool (a -> a -> a)
2 (&&) :: (->) Bool ((->) Bool Bool)
2 (||) :: (->) Bool ((->) Bool Bool)
2 not :: (->) Bool Bool
2 map
2 concatMap
2 length :: forall a . (->) ([a]) Int
2 replicate :: forall a . Int -> a -> [a]
2 take :: forall a . Int -> [a] -> [a]
2 drop :: forall a . Int -> [a] -> [a]
2 takeWhile :: forall a . (a -> Bool) -> [a] -> [a]
2 dropWhile :: forall a . (a -> Bool) -> [a] -> [a]
2 reverse :: forall a . [a] -> [a]
2 and :: (->) ([Bool]) Bool
2 or :: (->) ([Bool]) Bool
2 any
2 all
2 zipWith
2 sortBy :: forall a . (a -> a -> Ordering) -> [a] -> [a]
2 nubBy :: forall a . (a -> a -> Bool) -> [a] -> [a]
2 deleteBy :: forall a . (a -> a -> Bool) -> a -> [a] -> [a]
2 dropWhileEnd :: forall a . (a -> Bool) -> [a] -> [a]
2 transpose :: forall a . [[a]] -> [[a]]
2 toUpper :: (->) Char Char
2 toLower :: (->) Char Char
2 ord :: Char -> Int
2 isControl :: (->) Char Bool
2 isSpace :: (->) Char Bool
2 isLower :: (->) Char Bool
2 isUpper :: (->) Char Bool
2 isAlpha :: (->) Char Bool
2 isAlphaNum :: (->) Char Bool
2 isDigit :: (->) Char Bool
2 isSymbol :: (->) Char Bool
2 isPunctuation :: (->) Char Bool
2 lines :: [Char] -> [[Char]]
2 words :: [Char] -> [[Char]]
2 unlines :: [[Char]] -> [Char]
2 unwords :: [[Char]] -> [Char]
2 show :: Int -> [Char]
2 sort